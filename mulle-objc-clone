#! /usr/bin/env bash
#
#   Copyright (c) 2016 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#

MULLE_BUILD_MIN_MAJOR="3"
MULLE_BUILD_MIN_MINOR="3"


usage()
{
   cat <<EOF >&2
usage: mulle-xcode-clone [options]

   Options
      -a   : don't ask
      -b   : branch to checkout (default: release)
      -cb  : branch to checkout for C repositories (inherits -b)
      -eb  : branch to checkout for embedded repositories (inherits -cb)
      -p   : prefix for repositories (default: https://github.com/mulle-objc/)
      -cp  : prefix for C repositories (inherits -p)
      -ep  : prefix for embedded repositories (inherits -cp)
EOF
   exit 1
}


#
# This script will create the following structure:
#
# MulleObjC-${BRANCH}/${REPOS}
# MulleObjC-${BRANCH}/embeds/${QUASI_BARE_REPOS}
#
# QUASI_BARE_REPOS are then added to the cache path,
# so they can be found for embedding by REPOS.
#
# All REPOS are made to defer to MulleObjC-master
#

while [ $# -ne 0 ]
do
   case "$1" in
      -a|-y)
         DONT_ASK="YES"
      ;;

      -b|--branch|-ob|--objc-branch)
         shift
         [ $# -eq 0 ] && echo "branch missing" >&2 && exit 1
         OBJC_BRANCH="$1"
      ;;

      -cb|--c-branch)
         shift
         [ $# -eq 0 ] && echo "c branch missing" >&2 && exit 1
         COMMON_BRANCH="$1"
      ;;

      -eb|--embedded-branch)
         shift
         [ $# -eq 0 ] && echo "embedded branch missing" >&2 && exit 1
         EMBEDDED_BRANCH="$1"
      ;;

      -p|--repository-prefix|-op|--objc-repository-prefix)
         shift
         [ $# -eq 0 ] && echo "repository prefix missing" >&2 && exit 1
         OBJC_REPOPREFIX="$1"
      ;;

      -cp|--c-repository-prefix)
         shift
         [ $# -eq 0 ] && echo "c repository prefix missing" >&2 && exit 1
         COMMON_REPOPREFIX="$1"
      ;;

      -ep|-embedded-repository-prefix)
         shift
         [ $# -eq 0 ] && echo "embeddes repository prefix missing" >&2 && exit 1
         EMBEDDED_REPOPREFIX="$1"
      ;;

      -t)
         set -x
      ;;

      -*)
         echo "unknown option: $1" >&2
         usage
      ;;

      *)
         break
      ;;
   esac

   shift
done

COMMAND="${1:-clone}"
[ $# -ne 0 ] && shift

#
# setup default values if not set by options
#
OBJC_REPOPREFIX="${OBJC_REPOPREFIX:-https://github.com/mulle-objc/}"
OBJC_BRANCH="${OBJC_BRANCH:-release}"

COMMON_REPOPREFIX="${COMMON_REPOPREFIX:-${OBJC_REPOPREFIX}}"
COMMON_BRANCH="${COMMON_BRANCH:-${OBJC_BRANCH}}"

EMBEDDED_REPOPREFIX="${EMBEDDED_REPOPREFIX:-${COMMON_REPOPREFIX}}"
EMBEDDED_BRANCH="${EMBEDDED_BRANCH:-${COMMON_BRANCH}}"


MASTER_DIR="MulleObjC-${OBJC_BRANCH}"
CACHE_DIR="`pwd -P`/MulleObjC-${OBJC_BRANCH}/embeds-${EMBEDDED_BRANCH}"  # must be absolute


#
# These are actualy non-bare repositories, that act like bare repositories.
# You can push to them and from there you can push to the origin
# In a hurry you can also edit in them. Be careful though, pushes
# from other repositories overwrite your changes!
#

EMBEDDED_REPOS='mulle-tests
mulle-configuration
mulle-homebrew'

#
# They are regular repositories that push to the origin
#
COMMON_REPOS='mulle-aba
mulle-allocator
mulle-c11
mulle-concurrent
mulle-container
mulle-thread
mulle-vararg'

OBJC_REPOS='mulle-objc-runtime
MulleObjC'

REPOS="${COMMON_REPOS}
${OBJC_REPOS}"


fail()
{
   echo "%@" >&2
   exit 1
}


setup_hooks()
{
   cat <<EOF >> "$i/.git/hooks/pre-receive" || exit 1
#!/bin/sh

#
# in case the user did some local edits: at least save them
# in the stash
#
SRC_DIR="\`dirname -- "\$PWD"\`"

(
   GIT_DIR="\$PWD" &&
   cd "\${SRC_DIR}" &&
   git stash save
)
EOF
   chmod 755 "$i/.git/hooks/pre-receive" || exit 1

   cat <<EOF >> "$i/.git/hooks/post-receive" || exit 1
#!/bin/sh
#
# ensure that pushes get reflected in the repository, so that
# old files don't look like edits.
#
SRC_DIR="\`dirname -- "\$PWD"\`"

(
   GIT_DIR="\$PWD" &&
   cd "\${SRC_DIR}" &&
   git reset -q --hard
)
EOF

   chmod 755 "$i/.git/hooks/post-receive" || exit 1
}


enable_push()
{
   ( GIT_DIR="$1/.git" git config receive.denyCurrentBranch ignore ) || exit 1
}


blurb_and_ask()
{
   local old

   old="${IFS}"
   IFS="
"
   for repo in ${OBJC_REPOS}
   do
      echo "The branch \"${OBJC_BRANCH}\" of \"${repo}\" from \"${OBJC_REPOPREFIX}\" will be cloned into \"${MASTER_DIR}\"."
   done
   for repo in ${COMMON_REPOS}
   do
      echo "The branch \"${COMMON_BRANCH}\" of \"${repo}\" from \"${COMMON_REPOPREFIX}\" will be cloned into \"${MASTER_DIR}\"."
   done
   for repo in ${EMBEDDED_REPOS}
   do
      echo "The branch \"${EMBEDDED_BRANCH}\" of \"${repo}\" from \"${EMBEDDED_REPOPREFIX}\" will be cloned into \"${MASTER_DIR}\"."
   done

   cat <<EOF

Then everything will be set up in a convenient way using mulle-bootstrap.

Press [RETURN] to continue, [CTRL]-[C] to abort
EOF

   read
}


check_environment()
{
   if [ -z "`command -v mulle-bootstrap`" ]
   then
      echo "mulle-bootstrap is not in PATH" >&2
      exit 1
   fi

   if [ -z "`command -v mulle-build`" ]
   then
      echo "mulle-build is not in PATH" >&2
      exit 1
   fi

   if [ -z "`command -v git`" ]
   then
      echo "git is not in PATH" >&2
      exit 1
   fi
}


check_mulle_build_version()
{
   local version
   local major
   local minor

   version="`mulle-build --version | head -1`"
   [ -z "${version}" ] && fail "mulle-build missing"

   major="`echo "${version}" | cut -s -d. -f1`"
   if [ "${major}" -gt "${MULLE_BUILD_MIN_MAJOR}" ]
   then
      return 1
   fi

   if [ "${major}" -eq "${MULLE_BUILD_MIN_MAJOR}" ]
   then
      minor="`echo "${version}" | cut -s -d. -f2`"
      if [ "${minor}" -lt "${MULLE_BUILD_MIN_MINOR}" ]
      then
         return 1
      fi
   fi

   return 0
}


clone()
{
   check_environment
   check_mulle_build_version || fail "mulle-build too old, please update"

   [ "${DONT_ASK}" != "YES" ] && blurb_and_ask

   mkdir -p "${CACHE_DIR}" 2> /dev/null
   (
      cd "${CACHE_DIR}"

      local i

      for i in $EMBEDDED_REPOS
      do
         if [ ! -d "$i" ]
         then
            git clone --branch "${EMBEDDED_BRANCH}" "${EMBEDDED_REPOPREFIX}/${i}" "${i}" || exit 1
            # setup_hooks "$i"
            # enable_push "$i"
            echo "" >&2
         else
            echo "${i} already exists, skipping..." >&2
         fi
      done
   )

   mkdir -p "${MASTER_DIR}" 2> /dev/null
   (
      cd "${MASTER_DIR}"

      for i in $COMMON_REPOS
      do
         if [ ! -d "$i" ]
         then
            git clone --branch "${COMMON_BRANCH}" "${COMMON_REPOPREFIX}${i}" "${i}" || exit 1
            echo "" >&2
         else
            echo "${i} already exists, skipping..." >&2
         fi
      done

      local  last_repos

      for i in $OBJC_REPOS
      do
         if [ ! -d "$i" ]
         then
            git clone --branch "${OBJC_BRANCH}" "${OBJC_REPOPREFIX}${i}" "${i}" || exit 1
            echo "" >&2
         else
            echo "${i} already exists, skipping..." >&2
         fi
         last_repos="$i"
      done

      for i in $REPOS
      do
         echo "" >&2
         echo "<<>> Setup $i" >&2
         echo "" >&2
         (
            cd "$i"
            mulle-bootstrap -f defer
         )
         echo "" >&2
      done

      # now actually bootstrap to pull it all together

      #
      # configure mulle-bootstrap to use symlinks if possible
      #
      mulle-bootstrap config caches_path "${CACHE_DIR}"

      mulle-bootstrap config -y dont_warn_scripts
      mulle-bootstrap config -y embedded_symlinks
      mulle-bootstrap config -y symlinks

      # or what ?
      # Ã¥mulle-bootstrap config override_branch "${EMBEDDED_BRANCH}"
      mulle-bootstrap || exit 1

      cat <<EOF
${last_repos} is now ready to be built with:

cd '${MASTER_DIR}/${last_repos}'
mulle-build
EOF

   ) || exit 1
}


run()
{
   local command="$1" ; shift

   (
      cd "${MASTER_DIR}"

      local i

      for i in $REPOS
      do
         if [ -d "$i" ]
         then
            echo "<<>> $i" >&2
            ( cd "$i" && "${command}" "$@" ) || exit 1
            echo >&2
         fi
      done
   ) || return 1
}


main()
{
   case "${COMMAND}" in
      clone)
         clone "$@"
      ;;

      build)
         local final

         final="`echo "${OBJC_REPOS}" | tail -1 `"
         (
            cd "${MASTER_DIR}/${final}" || exit 1
            mulle-build "$@"  || exit 1
         ) || exit 1
      ;;

      *)
         run "${COMMAND}" "$@" || exit 1
      ;;

      *)
      echo "unknown command: $1" >&2
      exit 1
   esac
}


main "$@"
