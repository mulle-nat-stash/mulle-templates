#! /usr/bin/env bash
#
#   Copyright (c) 2016 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#

usage()
{
   cat <<EOF >&2
${MULLE_EXECUTABLE} <options>

Runs through templates and runs all .scion files through mulle-scion.
The result will be stored in a file without the .scion extension in a
location in your project directory.

e.g. templates/dox/foo.html.scion produces dox/foo.html

You can use the shells script ./bin/tap-info.sh to define the publisher
values, or use the following options.

Options:
   -f                 : force generation of templates
   --<name> <value>   : pass arbitrary key/values to print
   --publisher <name> : PUBLISHER to print (e.g. mulle-nat)
   --tap <name>       : PUBLISHER_TAP to print (e.g. mulle-kybernetik/software)
   --fullname <name>  : PUBLISHER_FULLNAME to print (e.g. Mulle KybernetiK)
EOF
   exit 1
}


assert_mulle_scion()
{
   local path
   local version

   path="`command -v mulle-scion`"
   [ -z "${path}" ] && fail "mulle-scion not installed (https://github.com/mulle-nat/MulleScion)"
   version="`mulle-scion --version 2> /dev/null`"
   if [ $? -ne 0 ] || [ -z "${version}" ]
   then
      fail "mulle-scion is outdated. v1858 or better required"
   fi

   version="`cut -d. -f1 <<< "${version}"`"
   if [ "${version}" -lt "1858" ]
   then
      fail "mulle-scion is outdated. v1858 or better required"
   fi
}


read_extension_wrapper()
{
   local rootdirectory="$1"
   local ext="$2"

   local wrapper
   local path

   if [ "${OPTION_READ_WRAPPER}" = "YES" ]
   then
      path="${rootdirectory}/_wrapper.${ext}.scion"
      if [ -f "${path}" ]
      then
         log_verbose "Found wrapper \"${path}\""
         wrapper="`absolutepath "${path}"`"
      else
         log_fluff "No wrapper \"$path\" for extension \"$ext\" found"
      fi
   else
      log_fluff "Ignoring any wrappers"
   fi
   echo "${wrapper}"
}

# http://askubuntu.com/questions/152001/how-can-i-get-octal-file-permissions-from-command-line
lso()
{
   ls -aldG "$@" | \
   awk '{k=0;for(i=0;i<=8;i++)k+=((substr($1,i+2,1)~/[rwx]/)*2^(8-i));if(k)printf(" %0o ",k);print }' | \
   awk '{print $1}'
}


is_generation_needed()
{
   local template="$1"
   local wrapper="$2"
   local output="$3"

   [ "${OPTION_FORCE}" = "YES" ]     && return 0
   [ ! -e "${output}" ]              && return 0
   [ "${template}" -nt "${output}" ] && return 0
   [ ! -z "${wrapper}" ] && [ "${wrapper}" -nt "${output}" ] && return 0

   return 1
}


generate()
{
   local template="$1"
   local output="$2"
   local rootdirectory="$3"

   local ext
   local wrapper
   local environment
   local templatename
   local mode

   mode="`lso "${template}"`"
   templatename="${template}"
   ext="${output##*.}"
   wrapper="`read_extension_wrapper "${rootdirectory}" "${ext}"`"

   if ! is_generation_needed "${templatename}" "${wrapper}" "${output}"
   then
      log_verbose "\"${output}\" appears up to date"
      return
   fi

   if [ ! -z "${wrapper}"  ]
   then
      log_info "Printing \"${output}\" from \"${template}\" using \"`basename -- "${wrapper}"`\" ..." >&2
      environment="MULLESCION_ALLOW_GETENV_INCLUDES='YES' \
TEMPLATE_FILE='${template}'"
      template="${wrapper}"
   else
      log_info "Printing \"${output}\" from \"${template}\"..." >&2
   fi

   if [ -e "${output}" ]
   then
      exekutor chmod a+w "${output}"
   fi

   eval_exekutor "MULLESCION_NO_HASHBANG=YES" "${environment}" \
         mulle-scion "'${template}'" args "'${output}'" \
            "PUBLISHER='${PUBLISHER}'" \
            "PUBLISHER_TAP='${PUBLISHER_TAP}'" \
            "PUBLISHER_FULLNAME='${PUBLISHER_FULLNAME}'" \
            "COMMENT='DO NOT EDIT THIS FILE. EDIT THE TEMPLATE \"${templatename}\"'" \
            "${USERARGS}" || exit 1

   # restore permissions for file from template
   # then write protect it as a further hint
   exekutor chmod "${mode}" "${output}"
   exekutor chmod a-w "${output}"
}


generate_directory()
{
   local directory="$1"
   local prefix="$2"
   local rootdirectory="${3:-${directory}}"

   for i in `( cd "${directory}" ; ls -1a )`
   do
      case "$i" in
         .|..)
            continue
         ;;
      esac

      log_fluff "Considering \"${i}\"..."

      case "$i" in
         _*.scion)
            log_fluff "Not processing underscore prefixed template \"$i\""
            continue
         ;;

         .*.scion|*.scion)
            [ ! -z "${prefix}" ] && mkdir -p "${prefix}"

            generate "${directory}/$i" "${prefix}`basename -- "${i}" .scion`" "${rootdirectory}"
         ;;

         *)
            if [ -d "${directory}/${i}" ]
            then
               generate_directory "${directory}/$i" "${prefix}${i}/" "${rootdirectory}"
            fi
         ;;
      esac
   done
}


main()
{
   local templates="templates"  # not really variable

   local USERARGS

   local OPTION_READ_TAP_INFO="YES"
   local OPTION_READ_WRAPPER="YES"
   local OPTION_PUBLISHER
   local OPTION_PUBLISHER_FULLNAME
   local OPTION_PUBLISHER_TAP
   local OPTION_FORCE="NO"

   local varname

   while [ $# -ne 0 ]
   do
      case "$1" in
         -f|--force)
            OPTION_FORCE="YES"
         ;;

         -i|-ignore-tap-info)
            OPTION_READ_TAP_INFO="NO"
         ;;

         -n|--dry-run)
            MULLE_FLAG_EXEKUTOR_DRY_RUN="YES"
         ;;

         -v)
            MULLE_FLAG_LOG_VERBOSE="YES"
         ;;

         -vv|-vvv)
            MULLE_FLAG_LOG_VERBOSE="YES"
            MULLE_FLAG_LOG_FLUFF="YES"
         ;;

         --ignore-wrapper)
            OPTION_READ_WRAPPER="NO"
         ;;

         -V)
            MULLE_FLAG_LOG_EXEKUTOR="YES"
         ;;

         -t)
            set -x
         ;;

         --publisher)
            [ $# -eq 1 ] && fail "missing argument to $1"
            shift
            OPTION_PUBLISHER="$1"
         ;;

         --fullname|--publisher-fullname)
            [ $# -eq 1 ] && fail "missing argument to $1"
            shift
            OPTION_PUBLISHER_FULLNAME="$1"
         ;;

         --tap|--publisher-tap)
            [ $# -eq 1 ] && fail "missing argument to $1"
            shift
            OPTION_PUBLISHER_TAP="$1"
         ;;

            # allow user to specify own parameters for his
            # generate_formula scripts w/o having to modify this file
         --*)
            [ $# -eq 1 ] && fail "missing parameter for \"$1\""

            varname="`sed 's/^..//' <<< "$1"`"
            varname="`tr '-' '_' <<< "${varname}"`"
            varname="`tr '[a-z]' '[A-Z]' <<< "${varname}"`"
            if ! egrep -q -s '^[A-Z_][A-Z0-9_]*$' <<< "${varname}" > /dev/null
            then
               fail "invalid variable specification \"${varname}\", created by \"$1\""
            fi

            shift

            if [ -z "${USERARGS}" ]
            then
               USERARGS="${varname}='$1'"
            else
               USERARGS="${userargs} ${varname}='$1'"
            fi
            log_info "User variable ${varname} set to \"$1\""
         ;;

         -*)
            usage
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   if [ "${OPTION_READ_TAP_INFO}" = "YES" ]
   then
      if [ -x "./bin/tap-info.sh" ]
      then
         log_verbose "Reading ./bin/tap-info.sh"
         . ./bin/tap-info.sh
      else
         log_fluff "./bin/tap-info.sh not present"
      fi
   fi

   PUBLISHER="${OPTION_PUBLISHER:-${PUBLISHER}}"
   PUBLISHER_FULLNAME="${OPTION_PUBLISHER_FULLNAME:-${PUBLISHER_FULLNAME}}"
   PUBLISHER_TAP="${OPTION_PUBLISHER_TAP:-${PUBLISHER_TAP}}"

   [ -z "${PUBLISHER}" ]          && fail "PUBLISHER undefined"
   [ -z "${PUBLISHER_FULLNAME}" ] && fail "PUBLISHER_FULLNAME undefined"
   [ -z "${PUBLISHER_TAP}" ]      && fail "PUBLISHER_TAP undefined"

   log_fluff "PUBLISHER=\"${PUBLISHER}\""
   log_fluff "PUBLISHER_FULLNAME=\"${PUBLISHER_FULLNAME}\""
   log_fluff "PUBLISHER_TAP=\"${PUBLISHER_TAP}\""
   log_fluff "USERARGS=\"${USERARGS}\""

   assert_mulle_scion

   if [ ! -d "${templates}" ]
   then
      fail "The templates directory \"${templates}\" is missing."
   fi

   generate_directory "${templates}"
}


_initialize()
{
   local directory

   if [ -z "${MULLE_EXECUTABLE_PID}" ]
   then
      MULLE_EXECUTABLE="`basename -- "$0"`"
      MULLE_EXECUTABLE_FAIL_PREFIX="${MULLE_EXECUTABLE}"
      MULLE_EXECUTABLE_PID=$$

      directory="`mulle-bootstrap library-path 2> /dev/null`"
      [ ! -d "${directory}" ] && echo "Failed to locate mulle-bootstrap library. https://github.com/mulle-nat/mulle-bootstrap" >&2 && exit 1
      PATH="${directory}:$PATH"

      [ -z "${MULLE_BOOTSTRAP_LOGGING_SH}" ]   && . mulle-bootstrap-logging.sh
      [ -z "${MULLE_BOOTSTRAP_FUNCTIONS_SH}" ] && . mulle-bootstrap-functions.sh
  fi
}

_initialize "%@"


#
# don't kill the process group like mulle-bootstrap does (and shouldn't)
#
_bail()
{
   exit 1
}

main "$@"
